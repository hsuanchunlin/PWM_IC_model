library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
install.packages("rbokeh")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
pnorm(0.65, 1147, 82)
pnorm(1200, 1147, 82)
library(igraph)
install.packages("igraph")
library(ggplot2)
library(tidyr)
library(ggplot2)
library(igraph)
library(tidyverse)
library(data.table)
ln(1)
log(1)
log(2)/(6)
X = seq(0,12, by = 0.1)
Y = 80*exp(-0.116*X)
plot(X, Y)
X = seq(0,24, by = 0.1)
Y = 80*exp(-0.116*X)
plot(X,Y)
line(X,Y)
lines(X,Y)
lines(X,Y)
plot()
plot(X,Y, type = 'l')
Y[-1]
install.packages(c("backports", "BH", "blob", "boot", "broom", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "ellipsis", "fansi", "farver", "fiery", "forcats", "foreign", "future", "generics", "ggplot2", "globals", "glue", "gtools", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "labelled", "later", "lattice", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "openssl", "pillar", "pkgbuild", "pkgload", "plotly", "processx", "promises", "ps", "R6", "Rcpp", "readr", "reprex", "rJava", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "spatial", "stringi", "survey", "survival", "tableone", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridisLite", "withr", "xfun", "xlsx", "zoo"))
version
library(cluster)
library(cluster)
library(codetools)
library(compiler)
library(foreign)
library(nlme)
library(parallel)
detach("package:parallel", unload = TRUE)
library(splines)
library(tools)
library(survival)
install.packages(c("nlme", "survival"))
q()
updates.packages()
update.packages()
library("ggplot2")
x = c(1,2,3,4,5)
y = c(1,2,3,4,5)
g <- ggplot(x, y)
g <- ggplot(x, y)+
geom_point()
library(tidyverse)
install.package("tidyverse")
install.packages("tidyverse")
r = data.frame(x,y)
r
p = ggplot(r, aes(x=x, y=y)) + geom_point()
p
library(mltools)
install.library("mltools")
install.packages(mltools)
library(tidyverse)
Dataset <- data.frame("y"=c(80, 72, 32), "Var1" = c(-62, -51, -5), "Var2"=c("A", "B", "C"))
View(Dataset)
Dataset <- mutate(Dataset, A = ifelse(Var2=="A",1,0))
Dataset <- mutate(Dataset, B = ifelse(Var2=="B",1,0))
Dataset <- mutate(Dataset, C = ifelse(Var2=="C",1,0))
View(Dataset)
a = "a"
b = 'b'
c = paste(a,b)
c
c = paste(a,b, sep = "")
c
alphabet = c('A', 'B', 'C')
for i in length(3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2==)", alphabet[i], "1, 0", sep="")
print(command)
}
alphabet[1]
for (i in 1:length(3)){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2==)", alphabet[i], "1, 0", sep="")
print(command)
}
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2==)", alphabet[i], "1, 0", sep="")
print(command)
}
# now more dynamic one
alphabet = c('A', 'B', 'C')
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2==)", alphabet[i], ",1, 0", sep="")
print(command)
}
alphabet = c('A', 'B', 'C')
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2==\"", alphabet[i], "\",1,0", sep="")
print(command)
}
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2=='", alphabet[i], "',1,0", sep="")
print(command)
}
alphabet = c('A', 'B', 'C')
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2=='", alphabet[i], "',1,0)", sep="")
print(command)
}
Dataset <- data.frame("y"=c(80, 72, 32), "Var1" = c(-62, -51, -5), "Var2"=c("A", "B", "C"))
View(Dataset)
alphabet = c('A', 'B', 'C')
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2=='", alphabet[i], "',1,0)", sep="")
print(command)
eval(parse=command)
}
alphabet = c('A', 'B', 'C')
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2=='", alphabet[i], "',1,0)", sep="")
print(command)
eval(parse(text=command))
}
View(Dataset)
for (i in 1:3){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2=='", alphabet[i], "',1,0))", sep="")
print(command)
eval(parse(text=command))
}
View(Dataset)
c = 'ABVDF'
slice(c)
substr(c)
substr(c,1)
substr(c,1,5)
substr(c,1,1)
substr(c,2,3)
substr(c,2,2)
substr(c,2)
strsplit(c)
split(c)
strsplit(c, "")
split(c, "")
strsplit(c, "")
Dataset <- data.frame("y"=c(80, 72, 32), "Var1" = c(-62, -51, -5), "Var2"=c("AACCG", "CGAAC", "CCTTA"))
Dataset <- data.frame("y"=c(80, 72, 32), "Var1" = c(-62, -51, -5), "Var2"=c("AACCG", "CGAAC", "CCTTA"))
View(Dataset)
Dataset.Var2[1]
View(Dataset)
Dataset
Dataset$Var2
Dataset$Var2[1]
seqlen = length(
strsplice(Dataset$Var2[1], "")
)
seqlen = length(
strsplice(Dataset$Var2[1], "")
)
seqlen = length(
strsplit(Dataset$Var2[1], "")
)
strsplit(Dataset$Var2[1], "")
seqlen
seqlen = length(
strsplit(Dataset$Var2[1], "")[1]
)
seqlen
strsplit(Dataset$Var2[1], "")
seqlen = length(
strsplit(Dataset$Var2[[1]], "")
)
strsplit(Dataset$Var2[[1]], "")
strsplit(Dataset$Var2[1], "")[1]
R = strsplit(Dataset$Var2[1], "")
R
length(R)
length(R[1])
length(R[[1]])
seqlen = length(
strsplit(Dataset$Var2[1], "")[[1]]
)
for (i in 1:4){
for (j in 1:seqlen ){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], j, "= ifelse(Var2=='", alphabet[i], "',1,0))", sep="")
print(command)
eval(parse(text=command))
}
}
View(Dataset)
strsplit(Dataset$Var2[1], "")[[1]]
strsplit(Dataset$Var2[1], "")[[1]][1]
for (i in 1:4){
for (j in 1:seqlen ){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], j, "= ifelse(strsplit(Dataset$Var2[1], "")[[1]][",j,"]=='", alphabet[i], "',1,0))", sep="")
print(command)
#eval(parse(text=command))
}
}
for (i in 1:4){
for (j in 1:seqlen ){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], j, "= ifelse(strsplit(Dataset$Var2[1], "")[[1]][",j,"]==", alphabet[i], "',1,0))", sep="")
print(command)
#eval(parse(text=command))
}
}
for (i in 1:4){
for (j in 1:seqlen ){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], j, "= ifelse(strsplit(Dataset$Var2[1], "")[[1]][",j,"]==", alphabet[i], "',1,0))", sep="")
print(command)
#eval(parse(text=command))
}
}
for (i in 1:seqlen){
for (j in 1:seqlen ){
command = paste("Dataset <- mutate(Dataset,", alphabet[i], "= ifelse(Var2=='", alphabet[i], "',1,0))", sep="")
print(command)
#eval(parse(text=command))
}
}
strsplit(data$Var2, "")
seq = c('AACCD', "BBVCS", 'DDSCS')
seq.apply(strsplit(""))
apply(seq, strsplit(""))
lapply(seq, strsplit(""))
lapply(seq, strsplit
)
lapply(seq, strsplit(split=''))
lapply(seq, strsplit(x,split=''))
strsplit(seq, "")
c = unlist(strsplit(seq, ""))
c
c = strsplit(seq, "")
data.frame(c)
c
unlist(c, recursive = FALSE)
unlist(c, recursive = TRUE)
cbind(seq,c)
p = cbind(seq, c)
p
p$c
View(p)
p$c[1]
p$c[[1]]
p/c
p.c
p = data.frame(p)
p$c
p$c[1]
apply(p,1,unlist)
apply(p,0,unlist)
apply(p,1,unlist)
R = apply(p,1,unlist)
X = RT%T
t(R)
X = t(R)
X
X.colnames = c('seq', 1,2,3,4,5)
X
X.colnames = c('seq', '1','2','3','4','5')
X
colnames(X)
X.colnames
dummyVars()
install.packages('caret')
library(caret)
dummyVars(X)
dummyVars('~.',X)
dummyVars(" ~ .", data = X)
dummyVars(" ~ ", data = X)
dummyVars("~", data = X)
dummyVars(data = X)
dummyVars("",data = X)
dummyVars(".",data = X)
dummyVars("~.",data = X)
pp <- dummyVars("~.",data = X)
pp
View(pp)
X
pp <- dummyVars(" ~ . ",data = X)
pp
X.c1 <- as.factor(X.c1)
X$c1 <- as.factor(X$c1)
X$c1
X
X$1
X = c('AFGHJ', 'SDSDS', 'DSADS')
p = strsplit(X)
p = strsplit(X,"")
p
data.frame(p)
library(clore)
library(caret)
dummyVar('~.', p)
dummyVars('~.', p)
dummyVars('~', p)
dummyVars('', p)
unlist(p)
library(ggplot2)
source("~/Documents/Coding/git-repo/PWM_IC/heatmap_for_IC.R")
(p <- ggplot(hm,aes(X2,X1))
+geom_tile(aes(fill = DINUCINT),colour = "gray")
+scale_fill_gradient2(low="steelblue",mid="white",
high="red", midpoint=0,space = "rgb",
na.value = "grey50", guide = "colourbar",
name = "HiTS-EQ")
+theme_bw()
+ theme(text = element_text(size=20),
axis.text= element_text(size=20,colour="black"))
+labs(size= 20,
x = "",
y = ""))
hm <- read.csv("demo_heat.csv")
setwd("~/Documents/Coding/git-repo/PWM_IC")
hm <- read.csv("demo_heat.csv")
(p <- ggplot(hm,aes(X2,X1))
+geom_tile(aes(fill = DINUCINT),colour = "gray")
+scale_fill_gradient2(low="steelblue",mid="white",
high="red", midpoint=0,space = "rgb",
na.value = "grey50", guide = "colourbar",
name = "HiTS-EQ")
+theme_bw()
+ theme(text = element_text(size=20),
axis.text= element_text(size=20,colour="black"))
+labs(size= 20,
x = "",
y = ""))
(p <- ggplot(hm,aes(X2,X1))
+geom_tile(aes(fill = DINUCINT),colour = "gray")
+scale_fill_gradient2(low="steelblue",mid="white",
high="red", midpoint=0,space = "rgb",
na.value = "grey50", guide = "colourbar",
name = "HiTS-EQ")
+theme_bw()
+ theme(text = element_text(size=10),
axis.text= element_text(size=10,colour="black"))
+labs(size= 20,
x = "",
y = ""))
# for PWM linear regression
#load the data
# clean the data storage
rm(list= ls())
howmany <- 6
data <- read.csv("chr_table.csv")   #Read in the data from a csv
data$LNRK <- log(data$RK)
attach(data)                                #Attach the column headers to the data as variable names
#Automatic generate the pair
nucleotides <- c('A','C','G','T')
combination <- c()
k <- 1
for (i in 1:howmany){
for(j in 1:4){
combination[k] <- paste(nucleotides[j],i,sep = '')
k <- k+1
}
}
control <- c('G1','A2','T3','T4','A5','G6','T7')
#cut the control
combination <- combination[!(combination %in% control)]
#generate the command
command.a <- 'lm1 <- lm(LNRK ~'
for (i in 1:(length(combination)-1)){
command.a <- paste(command.a, combination[i], '+')
}
command.a <- paste(command.a,combination[length(combination)], ')')
eval(parse(text = command.a))
#regress reaction rate on each base-position variable, and 1 interaction term
#Get the coefficient and prepare for data visualization
coef1 <- coef(lm1)
coef1 <- coef1[-1]
coef1[is.na(coef1)] <- 0
factor1 <- names(coef1)
coef1 <- as.numeric(coef1)
loca <- cbind(factor1, coef1)
loc <- control
lon <- rep(0,length(control))
locc <- cbind(loc,lon)
locd<- rbind(loca,locc)
locb <- data.frame(locd)
locb$NT <- substr(locb[,1],1,1)
locb$POS <- (as.numeric(substr(locb[,1],2,2)))
locb[locb$NT == 'T',3] <- 'U'
locb <- as.matrix(locb)
#Using bubble chart to visualize the data
par(mar=c(5,5,2,2))
colorc <- c("lightpink",rgb(129/255,216/255,208/255),"orange","olivedrab2")
#rgb(129/255,216/255,208/255)
seq <- c('A','C','G','U')
plot(NA,NA ,pch = 21, cex = 5, col = NULL, bg = "green",
xlim = c(1,7),
ylim = c(-0.3,0.3),
xlab = "Position in Leader",
ylab = "Linear Coefficient")
for (i in 1:4)
{
nt <- seq[i]
points(locb[locb[,3]== nt ,4],locb[locb[,3]== nt ,2] ,pch = 21, cex = 5, col = NULL, bg = colorc[i])
}
for (i in 1:length(locb[,1]))
{
text(as.numeric(locb[i,4]),as.numeric(locb[i,2]),locb[i,3], col = "black")
}
# if you need abline for tick
abline(h=0)
#See the prediction quality by linear model
lc <- predict(lm1, newdata = data)
lcf <- lm(lc~data$LNRK)
plot(data$LNRK,lc,
cex = 0.5,
xlim = c(-2,1.5),
ylim = c(-2,1.5),
xlab = expression(
italic(
paste("ln(",phantom()^r*K[a], ")")
)
),
ylab = expression(
italic(
paste("predicted ln(",phantom()^r*K[a], ")")
)
)
)
text(-1.5,0.5,paste("R= ", round(summary(lcf)$r.square,2)))
detach(data)
summary(lcf)
